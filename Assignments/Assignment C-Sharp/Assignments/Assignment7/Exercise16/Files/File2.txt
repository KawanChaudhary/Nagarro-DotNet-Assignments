using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.DurableTask;

namespace DurableFunctionDemo
{
    public class MyOrchestratorFunction : DurableOrchestrationClientBase
    {
        [FunctionName("MyOrchestratorFunction")]
        public async Task<string> RunOrchestrator([OrchestrationTrigger] IDurableOrchestrationContext context)
        {
            var result = await context.CallActivityAsync<string>("MyActivityFunction", "Hello, world!");
            return result;
        }

        [FunctionName("MyActivityFunction")]
        public string RunActivity([ActivityTrigger] string message)
        {
            return message;
        }
    }
}
C#
In this example, we've created a new class called MyOrchestratorFunction that inherits from DurableOrchestrationClientBase. This class contains two methods: RunOrchestrator and RunActivity. The RunOrchestrator method is marked with the [OrchestrationTrigger] attribute, which indicates that it will be the entry point for the orchestration. The method takes an IDurableOrchestrationContext object as its parameter, which provides access to the orchestration context.

Inside the RunOrchestrator method, we call the MyActivityFunction activity using the CallActivityAsync method. This method takes the name of the activity function and any parameters that need to be passed to it.

The MyActivityFunction method is marked with the [ActivityTrigger] attribute, which indicates that it will be an activity function. The method takes a string parameter and returns the same string. This simple activity function echoes back the message that was passed to it.